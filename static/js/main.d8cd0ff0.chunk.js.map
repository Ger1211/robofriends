{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","reducers.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","props","state","isFlipped","handleClick","bind","event","preventDefault","this","setState","prevState","id","name","email","phone","className","flipDirection","cardZIndex","onClick","alt","src","Component","CardList","robots","map","robot","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflow","border","height","children","ErrorBoundry","hasError","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","toLowerCase","includes","color","width","timeout","connect","searchRobots","requestRobots","error","dispatch","payload","target","value","fetch","then","response","json","data","catch","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.d8cd0ff0.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from 'react';\r\nimport ReactCardFlip from 'react-card-flip';\r\n\r\nclass Card extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isFlipped: false\r\n        };\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    handleClick(event) {\r\n        event.preventDefault();\r\n        this.setState(prevState => ({ isFlipped: !prevState.isFlipped }));\r\n    }\r\n\r\n    render() {\r\n        const { id, name, email, phone } = this.props;\r\n        return (\r\n            <div className=\"dib\">\r\n                <ReactCardFlip isFlipped={this.state.isFlipped} flipDirection=\"horizontal\" cardZIndex={id} >\r\n                    <div className=\"bg-light-green br3 pa3 ma2 grow bw2 shadow-5 tc\" onClick={this.handleClick} >\r\n                        <img alt=\"robot\" src={`https://robohash.org/${id}?200x200`} />\r\n                        <h2>{name}</h2>\r\n                        <p>Email: {email}</p>\r\n                    </div>\r\n\r\n                    <div className=\"bg-light-green br3 pa3 ma2 grow bw2 shadow-5 tc\" onClick={this.handleClick} >\r\n                        <img alt=\"robot\" src={`https://robohash.org/${id}?200x200`} />\r\n                        <h2>{name}</h2>\r\n                        <p>Phone: {phone}</p>\r\n                    </div>\r\n                </ReactCardFlip>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default Card;","import React, { Component} from 'react';\r\nimport Card from '../components/Card';\r\n\r\nclass CardList extends Component {\r\n\r\n    render() {\r\n        const { robots } = this.props;\r\n        return (\r\n            <div>\r\n                {\r\n                    robots.map((robot,i) => {\r\n                        return (\r\n                            <Card\r\n                                key={i}\r\n                                id={robot.id}\r\n                                name={robot.name}\r\n                                email={robot.email}\r\n                                phone={robot.phone}\r\n                            />\r\n                        );\r\n                    })\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CardList;","import React, { Component } from 'react';\r\n\r\nclass SearchBox extends Component {\r\n    \r\n    render() {\r\n        const { searchChange } = this.props;\r\n        return (\r\n            <div className=\"pa2\">\r\n                <input\r\n                    className=\"pa3 ba b--green bg-lightest-blue\"\r\n                    type=\"search\"\r\n                    placeholder=\"search robots\"\r\n                    onChange={searchChange}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchBox;","import React, { Component } from 'react';\r\n\r\nclass Scroll extends Component {\r\n    \r\n    render() {\r\n        return (\r\n            <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px' }}>\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch() {\r\n        this.setState({ hasError: true });\r\n    }\r\n\r\n    render() {\r\n        return this.state.hasError ?\r\n            <h3>Ooops... Something go wrong!</h3> :\r\n            this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport Loader from 'react-loader-spinner';\r\nimport '../containers/App.css';\r\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\r\nimport { setSearchField, requestRobots } from '../actions';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onSearchChange: event => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    }\r\n}\r\n\r\nclass App extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.onRequestRobots();\r\n    }\r\n\r\n    render() {\r\n        const { searchField, onSearchChange, robots, isPending } = this.props;\r\n        const filteredRobots = robots\r\n            .filter(robot => {\r\n                return robot.name\r\n                    .toLowerCase()\r\n                    .includes(searchField.toLowerCase());\r\n            });\r\n        return isPending ?\r\n            <div className=\"tc\">\r\n                <h3 className=\"f2\">LOADING...</h3>\r\n                <Loader\r\n                    type=\"Triangle\"\r\n                    color=\"#DBD65C\"\r\n                    height={100}\r\n                    width={100}\r\n                    timeout={0} \r\n\r\n                />\r\n            </div> :\r\n            <div className=\"tc\">\r\n                <h3 className=\"f2\">ROBOFRIENDS</h3>\r\n                <SearchBox searchChange={onSearchChange} />\r\n                <Scroll>\r\n                    <ErrorBoundry>\r\n                        <CardList robots={filteredRobots} />\r\n                    </ErrorBoundry>\r\n                </Scroll>\r\n            </div>\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAIL\r\n} from './constants';\r\n\r\nexport const setSearchField = text => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n});\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAIL, payload: error }))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAIL = 'REQUEST_ROBOTS_FAIL';","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAIL\r\n} from \"./constants\";\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n    switch (action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, { searchField: action.payload });\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n    switch (action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { isPending: true });\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, { robots: action.payload, isPending: false });\r\n        case REQUEST_ROBOTS_FAIL:\r\n            return Object.assign({}, state, {error: action.payload, isPending: false})\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './containers/App';\nimport 'tachyons';\nimport { searchRobots, requestRobots } from './reducers';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store} >\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}